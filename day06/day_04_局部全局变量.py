# -*- coding:utf-8 _*-
"""
@author:Yan-PC
@file: day_04_局部全局变量.py
@time: 2022/9/1 20:51
"""



"""
本章：全局、局部变量
变量是只用范围
变量的生命周期
"""

# global关键字规则
'''
1.函数内部创建变量，默认是局部变量
2.函数外部创建变量，默认是全局变量

3.全局变量关键字：global ，函数体内创建读、写均是全局变量
4.使用global申明的关键字，在函数体之外使用不生效   （就是global在函数外部定义的全局变量，如果没赋值，不能在函数体内使用这变量）
'''

global g  #（不能在声明全局变量的时候赋值）
#g = 100
print("函数体内部的g值", g)
print("函数体内部的g地址", id(g))


def my_func():
    x = 10 #函数内的赋值属于局部变量  （等号就是声明变量+赋值同时进行）
    y = 100

    print("函数体内部的x值:",x)
    print("函数体内部的x-地址",id(x))

    # g = 1000   # 报错，提示名称g未定义（NameError: name 'g' is not defined），原因是函数体外部定义的变量g， 函数里内赋值不生效
    print("函数体内部的g值",g)
    print("函数体内部的g地址",id(g))

    # 全局变量关键字
    global z    #声明全局变量
    z = 500   # 已有声明变量，所以这里是赋值语句
    print("函数体内部的z值",z)
    print("函数体内部的z-地址“",id(z))
    # global  Z = 1000


my_func()

x = 10    # 函数内部声明局部变量后，相同的赋值内存也不同（对程序来说，与函数内不是同一个变量了）
z = 500   # 函数内部声明全局变量后，相同的赋值时内存相同（对程序来说，是同一个变量）
print("函数体外部的x值是：",x)
print("函数体外部的x-地址",id(x))
print("函数体外部的z值是：",z)
print("函数体外部的z-地址",id(z))


